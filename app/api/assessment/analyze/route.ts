import { type NextRequest, NextResponse } from "next/server"
import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs"
import { cookies } from "next/headers"
import { generateObject } from "ai"
import { openai } from "@ai-sdk/openai"
import { z } from "zod"
import type { Database } from "@/types/database"

// Bilingual assessment result schema
const BilingualAssessmentResultSchema = z.object({
  riskLevel: z.enum(["low", "medium", "high", "very_high"]),
  riskFactors_th: z.array(z.string()).describe("Risk factors in Thai language"),
  riskFactors_en: z.array(z.string()).describe("Risk factors in English language"),
  recommendations_th: z.array(z.string()).describe("Recommendations in Thai language"),
  recommendations_en: z.array(z.string()).describe("Recommendations in English language"),
  summary_th: z.string().describe("Summary in Thai language"),
  summary_en: z.string().describe("Summary in English language"),
})

// Category-specific prompts
const getCategoryPrompt = (categoryId: string) => {
  const prompts = {
    lifestyle: {
      th: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
      en: "Analyze lifestyle and nutrition assessment results. Provide recommendations about improving eating habits, exercise, and health care.",
    },
    mental: {
      th: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
      en: "Analyze mental health assessment results. Provide recommendations about stress management, mental health care, and creating life balance.",
    },
    physical: {
      th: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÇ‡∏£‡∏Ñ",
      en: "Analyze physical health assessment results. Provide recommendations about exercise, body care, and disease prevention.",
    },
    sleep: {
      th: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ô‡∏¥‡∏™‡∏±‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô",
      en: "Analyze sleep quality assessment results. Provide recommendations about improving sleep habits and sleep health care.",
    },
  }

  return prompts[categoryId as keyof typeof prompts] || prompts.lifestyle
}

export async function POST(request: NextRequest) {
  try {
    console.log("üîç API: Starting assessment analysis...")

    const supabase = createRouteHandlerClient<Database>({ cookies })

    // Get current user
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser()
    if (authError || !user) {
      console.error("‚ùå API: Authentication error:", authError)
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const body = await request.json()
    const { answers, categoryId, totalScore, maxScore } = body

    console.log("üìä API: Assessment data received:")
    console.log("  - Category:", categoryId)
    console.log("  - Total Score:", totalScore)
    console.log("  - Max Score:", maxScore)
    console.log("  - Answers count:", answers?.length || 0)

    if (!answers || !categoryId) {
      return NextResponse.json({ error: "Missing required data" }, { status: 400 })
    }

    // Calculate percentage and risk level
    const percentage = Math.round((totalScore / maxScore) * 100)
    let riskLevel: "low" | "medium" | "high" | "very_high" = "medium"

    if (percentage >= 80) riskLevel = "low"
    else if (percentage >= 60) riskLevel = "medium"
    else if (percentage >= 40) riskLevel = "high"
    else riskLevel = "very_high"

    console.log("üìà API: Calculated metrics:")
    console.log("  - Percentage:", percentage + "%")
    console.log("  - Risk Level:", riskLevel)

    // Get category-specific prompts
    const categoryPrompt = getCategoryPrompt(categoryId)

    // Prepare answers summary for AI
    const answersText = answers
      .map(
        (answer: any, index: number) =>
          `‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà ${index + 1}: ${answer.question} - ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: ${answer.value} (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${answer.score})`,
      )
      .join("\n")

    console.log("ü§ñ API: Calling OpenAI for bilingual analysis...")

    // Generate bilingual AI analysis
    const { object: aiResult } = await generateObject({
      model: openai("gpt-4o"),
      system: `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©

‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©:

‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:
- ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 80-100%: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥ (low)
- ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 60-79%: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (medium)  
- ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 40-59%: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á (high)
- ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 0-39%: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å (very_high)

‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${categoryPrompt.th}
For ${categoryPrompt.en}

‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏:
1. riskFactors_th: ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) - array ‡∏Ç‡∏≠‡∏á string
2. riskFactors_en: Risk factors found (English) - array of strings
3. recommendations_th: ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) - array ‡∏Ç‡∏≠‡∏á string
4. recommendations_en: Improvement recommendations (English) - array of strings
5. summary_th: ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
6. summary_en: Assessment summary (English)

‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á`,
      prompt: `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ${categoryId}:

‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${totalScore}/${maxScore} (${percentage}%)
‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${riskLevel}

‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:
${answersText}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î`,
      schema: BilingualAssessmentResultSchema,
    })

    console.log("‚úÖ API: OpenAI analysis completed")
    console.log("üîç API: AI Result:", aiResult)

    // Get category titles
    const categoryTitles = {
      lifestyle: { th: "‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£", en: "Lifestyle and Nutrition" },
      mental: { th: "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï", en: "Mental Health" },
      physical: { th: "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏¢", en: "Physical Health" },
      sleep: { th: "‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô", en: "Sleep Quality" },
    }

    const categoryTitle = categoryTitles[categoryId as keyof typeof categoryTitles] || categoryTitles.lifestyle

    // Save to database with bilingual data
    console.log("üíæ API: Saving assessment to database...")

    const { data: savedAssessment, error: saveError } = await supabase
      .from("assessments")
      .insert({
        user_id: user.id,
        category_id: categoryId,
        category_title_th: categoryTitle.th,
        category_title_en: categoryTitle.en,
        total_score: totalScore,
        max_score: maxScore,
        percentage: percentage,
        risk_level: riskLevel,
        risk_factors_th: aiResult.riskFactors_th,
        risk_factors_en: aiResult.riskFactors_en,
        recommendations_th: aiResult.recommendations_th,
        recommendations_en: aiResult.recommendations_en,
        summary_th: aiResult.summary_th,
        summary_en: aiResult.summary_en,
        answers: answers,
        completed_at: new Date().toISOString(),
      })
      .select()
      .single()

    if (saveError) {
      console.error("‚ùå API: Database save error:", saveError)
      return NextResponse.json({ error: "Failed to save assessment" }, { status: 500 })
    }

    console.log("‚úÖ API: Assessment saved successfully")
    console.log("üìã API: Saved assessment ID:", savedAssessment?.id)

    // Return the complete result
    const result = {
      id: savedAssessment.id,
      categoryId,
      totalScore,
      maxScore,
      percentage,
      riskLevel,
      ...aiResult, // Include all bilingual AI results
    }

    console.log("üéâ API: Analysis completed successfully")
    return NextResponse.json(result)
  } catch (error) {
    console.error("‚ùå API: Unexpected error:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}
